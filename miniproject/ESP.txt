#include <ESP8266WiFi.h>
// #include <NTPClient.h>
#include <WiFiUdp.h>
#include <PubSubClient.h>
// #include <TridentTD_LineNotify.h>

// WiFi parameters
#define WLAN_SSID       "FrameMeRy"
#define WLAN_PASS       "framemery"

// MQTT parameters
const char* mqttServer = "172.20.10.2";
const int mqttPort = 1883;
const char* mqttTopic = "id";

String incomingString;

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  Serial.println(F("ESP8266 Example"));

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  delay(10);
  Serial.print(F("Connecting to "));
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(F("."));
  }
  Serial.println();

  Serial.println(F("WiFi connected"));
  Serial.println(F("IP address: "));
  Serial.println(WiFi.localIP());

  // Set up MQTT client
  client.setServer(mqttServer, mqttPort);
}


void loop() {
  if (Serial.available()) {
    incomingString = Serial.readString();
    sendToMQTT(incomingString.charAt(0));
  }

  if (!client.connected()) {
    reconnect();
  }

  client.loop();
}

void sendToMQTT(char id) {
  // Create JSON payload
  String jsonPayload = String(id);

  Serial.println("ID: " + String(id));

  // Publish to MQTT topic
  client.publish(mqttTopic, jsonPayload.c_str());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print(F("Attempting MQTT connection..."));
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println(F("connected"));
    } else {
      Serial.print(F("failed, rc="));
      Serial.print(client.state());
      Serial.println(F(" try again in 5 seconds"));
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}
